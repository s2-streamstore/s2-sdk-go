/*
Go SDK for S2.

The Go SDK provides ergonomic wrappers and utilities to interact with the
[S2 API].

# Getting started

1. Add the s2 dependency to your project:

	go get github.com/s2-streamstore/s2-sdk-go/s2

2. Generate an authentication token by logging onto the web console at
[s2.dev].

3. Make a request using SDK client.

	client, err := s2.NewClient("<YOUR AUTH TOKEN>")
	if err != nil {
		// Handle error.
	}

	basins, err := client.ListBasins(&s2.ListBasinsRequest{})
	if err != nil {
		// Handle error.
	}

	fmt.Println(basins)

# SDK Clients

The module defines three clients:

  - Client: Account level operations for [AccountService]
  - BasinClient: Basin level operations for [BasinService]
  - StreamClient: Stream level operations for [StreamService]

To interact with any client, you need an authentication token which can be
generated by the the web console at [s2.dev].

A client can be created using the corresponding New functions. A
ClientConfigParam defines other request parameters such as timeouts, S2
endpoints, etc. Multiple parameters can be passed into corresponding New
functions.

To avoid creating multiple connections to each service, Client.BasinClient can
be used to create a BasinClient and BasinClient.StreamClient can be used to
create a StreamClient.

Note: Even though the client creation operation is cheap, a BasinClient should
preferably be stored instead of using Client.BasinClient multiple times as the
account endpoint might vary from the basin endpoint creating a new connection
each time the request is sent. See Endpoints.

[S2 API]: https://s2.dev/docs/interface/grpc
[s2.dev]: https://s2.dev/dashboard
[AccountService]: https://s2.dev/docs/interface/grpc#accountservice
[BasinService]: https://s2.dev/docs/interface/grpc#basinservice
[StreamService]: https://s2.dev/docs/interface/grpc#streamservice
*/
package s2
