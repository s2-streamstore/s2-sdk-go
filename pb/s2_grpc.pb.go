// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: s2.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_ListBasins_FullMethodName       = "/s2.v1alpha.AccountService/ListBasins"
	AccountService_CreateBasin_FullMethodName      = "/s2.v1alpha.AccountService/CreateBasin"
	AccountService_DeleteBasin_FullMethodName      = "/s2.v1alpha.AccountService/DeleteBasin"
	AccountService_ReconfigureBasin_FullMethodName = "/s2.v1alpha.AccountService/ReconfigureBasin"
	AccountService_GetBasinConfig_FullMethodName   = "/s2.v1alpha.AccountService/GetBasinConfig"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Operate on an S2 account.
type AccountServiceClient interface {
	// List basins.
	ListBasins(ctx context.Context, in *ListBasinsRequest, opts ...grpc.CallOption) (*ListBasinsResponse, error)
	// Create a new basin.
	// Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
	CreateBasin(ctx context.Context, in *CreateBasinRequest, opts ...grpc.CallOption) (*CreateBasinResponse, error)
	// Delete a basin.
	// Basin deletion is asynchronous, and may take a few minutes to complete.
	DeleteBasin(ctx context.Context, in *DeleteBasinRequest, opts ...grpc.CallOption) (*DeleteBasinResponse, error)
	// Update basin configuration.
	ReconfigureBasin(ctx context.Context, in *ReconfigureBasinRequest, opts ...grpc.CallOption) (*ReconfigureBasinResponse, error)
	// Get basin configuration.
	GetBasinConfig(ctx context.Context, in *GetBasinConfigRequest, opts ...grpc.CallOption) (*GetBasinConfigResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) ListBasins(ctx context.Context, in *ListBasinsRequest, opts ...grpc.CallOption) (*ListBasinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBasinsResponse)
	err := c.cc.Invoke(ctx, AccountService_ListBasins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateBasin(ctx context.Context, in *CreateBasinRequest, opts ...grpc.CallOption) (*CreateBasinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBasinResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteBasin(ctx context.Context, in *DeleteBasinRequest, opts ...grpc.CallOption) (*DeleteBasinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBasinResponse)
	err := c.cc.Invoke(ctx, AccountService_DeleteBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ReconfigureBasin(ctx context.Context, in *ReconfigureBasinRequest, opts ...grpc.CallOption) (*ReconfigureBasinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReconfigureBasinResponse)
	err := c.cc.Invoke(ctx, AccountService_ReconfigureBasin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetBasinConfig(ctx context.Context, in *GetBasinConfigRequest, opts ...grpc.CallOption) (*GetBasinConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasinConfigResponse)
	err := c.cc.Invoke(ctx, AccountService_GetBasinConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
//
// Operate on an S2 account.
type AccountServiceServer interface {
	// List basins.
	ListBasins(context.Context, *ListBasinsRequest) (*ListBasinsResponse, error)
	// Create a new basin.
	// Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
	CreateBasin(context.Context, *CreateBasinRequest) (*CreateBasinResponse, error)
	// Delete a basin.
	// Basin deletion is asynchronous, and may take a few minutes to complete.
	DeleteBasin(context.Context, *DeleteBasinRequest) (*DeleteBasinResponse, error)
	// Update basin configuration.
	ReconfigureBasin(context.Context, *ReconfigureBasinRequest) (*ReconfigureBasinResponse, error)
	// Get basin configuration.
	GetBasinConfig(context.Context, *GetBasinConfigRequest) (*GetBasinConfigResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) ListBasins(context.Context, *ListBasinsRequest) (*ListBasinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBasins not implemented")
}
func (UnimplementedAccountServiceServer) CreateBasin(context.Context, *CreateBasinRequest) (*CreateBasinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasin not implemented")
}
func (UnimplementedAccountServiceServer) DeleteBasin(context.Context, *DeleteBasinRequest) (*DeleteBasinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasin not implemented")
}
func (UnimplementedAccountServiceServer) ReconfigureBasin(context.Context, *ReconfigureBasinRequest) (*ReconfigureBasinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconfigureBasin not implemented")
}
func (UnimplementedAccountServiceServer) GetBasinConfig(context.Context, *GetBasinConfigRequest) (*GetBasinConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasinConfig not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_ListBasins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListBasins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ListBasins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListBasins(ctx, req.(*ListBasinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateBasin(ctx, req.(*CreateBasinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteBasin(ctx, req.(*DeleteBasinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ReconfigureBasin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigureBasinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ReconfigureBasin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ReconfigureBasin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ReconfigureBasin(ctx, req.(*ReconfigureBasinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetBasinConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasinConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetBasinConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetBasinConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetBasinConfig(ctx, req.(*GetBasinConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s2.v1alpha.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBasins",
			Handler:    _AccountService_ListBasins_Handler,
		},
		{
			MethodName: "CreateBasin",
			Handler:    _AccountService_CreateBasin_Handler,
		},
		{
			MethodName: "DeleteBasin",
			Handler:    _AccountService_DeleteBasin_Handler,
		},
		{
			MethodName: "ReconfigureBasin",
			Handler:    _AccountService_ReconfigureBasin_Handler,
		},
		{
			MethodName: "GetBasinConfig",
			Handler:    _AccountService_GetBasinConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s2.proto",
}

const (
	BasinService_ListStreams_FullMethodName       = "/s2.v1alpha.BasinService/ListStreams"
	BasinService_CreateStream_FullMethodName      = "/s2.v1alpha.BasinService/CreateStream"
	BasinService_DeleteStream_FullMethodName      = "/s2.v1alpha.BasinService/DeleteStream"
	BasinService_GetStreamConfig_FullMethodName   = "/s2.v1alpha.BasinService/GetStreamConfig"
	BasinService_ReconfigureStream_FullMethodName = "/s2.v1alpha.BasinService/ReconfigureStream"
)

// BasinServiceClient is the client API for BasinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Operate on an S2 basin.
type BasinServiceClient interface {
	// List streams.
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	// Create a stream.
	// Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	// Delete a stream.
	// Stream deletion is asynchronous, and may take a few minutes to complete.
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error)
	// Get stream configuration.
	GetStreamConfig(ctx context.Context, in *GetStreamConfigRequest, opts ...grpc.CallOption) (*GetStreamConfigResponse, error)
	// Update stream configuration.
	ReconfigureStream(ctx context.Context, in *ReconfigureStreamRequest, opts ...grpc.CallOption) (*ReconfigureStreamResponse, error)
}

type basinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasinServiceClient(cc grpc.ClientConnInterface) BasinServiceClient {
	return &basinServiceClient{cc}
}

func (c *basinServiceClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, BasinService_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basinServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, BasinService_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basinServiceClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStreamResponse)
	err := c.cc.Invoke(ctx, BasinService_DeleteStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basinServiceClient) GetStreamConfig(ctx context.Context, in *GetStreamConfigRequest, opts ...grpc.CallOption) (*GetStreamConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamConfigResponse)
	err := c.cc.Invoke(ctx, BasinService_GetStreamConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basinServiceClient) ReconfigureStream(ctx context.Context, in *ReconfigureStreamRequest, opts ...grpc.CallOption) (*ReconfigureStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReconfigureStreamResponse)
	err := c.cc.Invoke(ctx, BasinService_ReconfigureStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasinServiceServer is the server API for BasinService service.
// All implementations must embed UnimplementedBasinServiceServer
// for forward compatibility.
//
// Operate on an S2 basin.
type BasinServiceServer interface {
	// List streams.
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	// Create a stream.
	// Provide a client request token with the `S2-Request-Token` header for idempotent retry behaviour.
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	// Delete a stream.
	// Stream deletion is asynchronous, and may take a few minutes to complete.
	DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamResponse, error)
	// Get stream configuration.
	GetStreamConfig(context.Context, *GetStreamConfigRequest) (*GetStreamConfigResponse, error)
	// Update stream configuration.
	ReconfigureStream(context.Context, *ReconfigureStreamRequest) (*ReconfigureStreamResponse, error)
	mustEmbedUnimplementedBasinServiceServer()
}

// UnimplementedBasinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasinServiceServer struct{}

func (UnimplementedBasinServiceServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedBasinServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedBasinServiceServer) DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedBasinServiceServer) GetStreamConfig(context.Context, *GetStreamConfigRequest) (*GetStreamConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamConfig not implemented")
}
func (UnimplementedBasinServiceServer) ReconfigureStream(context.Context, *ReconfigureStreamRequest) (*ReconfigureStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconfigureStream not implemented")
}
func (UnimplementedBasinServiceServer) mustEmbedUnimplementedBasinServiceServer() {}
func (UnimplementedBasinServiceServer) testEmbeddedByValue()                      {}

// UnsafeBasinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasinServiceServer will
// result in compilation errors.
type UnsafeBasinServiceServer interface {
	mustEmbedUnimplementedBasinServiceServer()
}

func RegisterBasinServiceServer(s grpc.ServiceRegistrar, srv BasinServiceServer) {
	// If the following call pancis, it indicates UnimplementedBasinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BasinService_ServiceDesc, srv)
}

func _BasinService_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinServiceServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasinService_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinServiceServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasinService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasinService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasinService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasinService_DeleteStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinServiceServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasinService_GetStreamConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinServiceServer).GetStreamConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasinService_GetStreamConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinServiceServer).GetStreamConfig(ctx, req.(*GetStreamConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasinService_ReconfigureStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigureStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinServiceServer).ReconfigureStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasinService_ReconfigureStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinServiceServer).ReconfigureStream(ctx, req.(*ReconfigureStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasinService_ServiceDesc is the grpc.ServiceDesc for BasinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s2.v1alpha.BasinService",
	HandlerType: (*BasinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStreams",
			Handler:    _BasinService_ListStreams_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _BasinService_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _BasinService_DeleteStream_Handler,
		},
		{
			MethodName: "GetStreamConfig",
			Handler:    _BasinService_GetStreamConfig_Handler,
		},
		{
			MethodName: "ReconfigureStream",
			Handler:    _BasinService_ReconfigureStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s2.proto",
}

const (
	StreamService_CheckTail_FullMethodName     = "/s2.v1alpha.StreamService/CheckTail"
	StreamService_Append_FullMethodName        = "/s2.v1alpha.StreamService/Append"
	StreamService_AppendSession_FullMethodName = "/s2.v1alpha.StreamService/AppendSession"
	StreamService_Read_FullMethodName          = "/s2.v1alpha.StreamService/Read"
	StreamService_ReadSession_FullMethodName   = "/s2.v1alpha.StreamService/ReadSession"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Operate on an S2 stream.
type StreamServiceClient interface {
	// Check the sequence number that will be assigned to the next record on a stream.
	CheckTail(ctx context.Context, in *CheckTailRequest, opts ...grpc.CallOption) (*CheckTailResponse, error)
	// Append a batch of records to a stream.
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	// Append batches of records to a stream continuously, while guaranteeing pipelined requests are processed in order.
	// If any request fails, the session is terminated.
	AppendSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AppendSessionRequest, AppendSessionResponse], error)
	// Retrieve a batch of records from a stream.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Retrieve batches of records from a stream continuously.
	ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadSessionResponse], error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) CheckTail(ctx context.Context, in *CheckTailRequest, opts ...grpc.CallOption) (*CheckTailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckTailResponse)
	err := c.cc.Invoke(ctx, StreamService_CheckTail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, StreamService_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) AppendSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AppendSessionRequest, AppendSessionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_AppendSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppendSessionRequest, AppendSessionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_AppendSessionClient = grpc.BidiStreamingClient[AppendSessionRequest, AppendSessionResponse]

func (c *streamServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, StreamService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadSessionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], StreamService_ReadSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadSessionRequest, ReadSessionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_ReadSessionClient = grpc.ServerStreamingClient[ReadSessionResponse]

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility.
//
// Operate on an S2 stream.
type StreamServiceServer interface {
	// Check the sequence number that will be assigned to the next record on a stream.
	CheckTail(context.Context, *CheckTailRequest) (*CheckTailResponse, error)
	// Append a batch of records to a stream.
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	// Append batches of records to a stream continuously, while guaranteeing pipelined requests are processed in order.
	// If any request fails, the session is terminated.
	AppendSession(grpc.BidiStreamingServer[AppendSessionRequest, AppendSessionResponse]) error
	// Retrieve a batch of records from a stream.
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Retrieve batches of records from a stream continuously.
	ReadSession(*ReadSessionRequest, grpc.ServerStreamingServer[ReadSessionResponse]) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServiceServer struct{}

func (UnimplementedStreamServiceServer) CheckTail(context.Context, *CheckTailRequest) (*CheckTailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTail not implemented")
}
func (UnimplementedStreamServiceServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedStreamServiceServer) AppendSession(grpc.BidiStreamingServer[AppendSessionRequest, AppendSessionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AppendSession not implemented")
}
func (UnimplementedStreamServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStreamServiceServer) ReadSession(*ReadSessionRequest, grpc.ServerStreamingServer[ReadSessionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadSession not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}
func (UnimplementedStreamServiceServer) testEmbeddedByValue()                       {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_CheckTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).CheckTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_CheckTail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).CheckTail(ctx, req.(*CheckTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_AppendSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).AppendSession(&grpc.GenericServerStream[AppendSessionRequest, AppendSessionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_AppendSessionServer = grpc.BidiStreamingServer[AppendSessionRequest, AppendSessionResponse]

func _StreamService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_ReadSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ReadSession(m, &grpc.GenericServerStream[ReadSessionRequest, ReadSessionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_ReadSessionServer = grpc.ServerStreamingServer[ReadSessionResponse]

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s2.v1alpha.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTail",
			Handler:    _StreamService_CheckTail_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _StreamService_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _StreamService_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendSession",
			Handler:       _StreamService_AppendSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadSession",
			Handler:       _StreamService_ReadSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "s2.proto",
}
