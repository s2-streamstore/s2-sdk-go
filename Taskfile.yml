version: '3'

tasks:
  example:
    aliases: [eg]
    requires:
      vars: [NAME]
    cmds:
      - task: example:build
        vars: { NAME: '{{.NAME}}' }
      - .out/examples/{{.NAME}} {{.CLI_ARGS}}

  example:build:
    deps:
      - gen
    requires:
      vars: [NAME]
    cmds:
      - go build -v -o .out/examples/{{.NAME}} ./examples/{{.NAME}}

  test:
    deps:
      - gen
    cmds:
      - go test -v ./...

  lint:
    deps:
      - lint:gen
      - lint:go

  lint:go:
    deps:
      - gen
    cmds:
      - golangci-lint run

  lint:gen:
    deps:
      - gen
    cmds:
      - |
        git diff --exit-code internal/pb/*.go s2/*.sync.go && echo "Up-to-date" || {
            echo "Not up-to-date"
            echo "Run task:gen and update the generated code"
            exit 1
        }

  fmt:
    deps:
      - gen
    cmds:
      - golangci-lint run --fix --issues-exit-code 0 &> /dev/null

  gen:
    deps:
      - gen:proto
      - gen:sync

  gen:proto:
    preconditions:
      - sh: which protoc
        msg: |
         `protoc` command not found
         Install the proto compiler: https://grpc.io/docs/protoc-installation/
      - sh: which protoc-gen-go
        msg: |
          `protoc-gen-go` command not found
          Install the Go extension using:
          $ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - sh: which protoc-gen-go-grpc
        msg: |
          `protoc-gen-go-grpc` command not found
          Install the gRPC extension using:
          $ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
    sources:
      - proto/s2/v1alpha/s2.proto
    generates:
      - internal/pb/s2.pb.go
      - internal/pb/s2_grpc.pb.go
    cmds:
      - test -d internal/pb || mkdir -p internal/pb
      - cmd: |
          protoc --proto_path=proto/s2/v1alpha \
            --go_opt=Ms2.proto=github.com/s2-streamstore/s2-sdk-go/internal/pb \
            --go-grpc_opt=Ms2.proto=github.com/s2-streamstore/s2-sdk-go/internal/pb \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            --go_out=internal/pb \
            --go-grpc_out=internal/pb \
            s2.proto

  gen:sync:
    deps:
      - gen:sync:types
      - gen:sync:client

  gen:sync:types:
    deps:
      - gen:sync:_bin
      - gen:proto
    sources:
      - .out/sync-docs
      - internal/pb/s2.pb.go
      - s2/types.sync.tmpl
    generates:
      - s2/types.sync.go
    cmds:
      - cmd: |
          .out/sync-docs \
            -i internal/pb/s2.pb.go \
            -t s2/types.sync.tmpl \
            -o s2/types.sync.go

  gen:sync:client:
    deps:
      - gen:sync:_bin
      - gen:proto
    sources:
      - .out/sync-docs
      - internal/pb/s2_grpc.pb.go
      - s2/client.sync.tmpl
    generates:
      - s2/client.sync.go
    cmds:
      - cmd: |
          .out/sync-docs \
            -i internal/pb/s2_grpc.pb.go \
            -t s2/client.sync.tmpl \
            -o s2/client.sync.go

  gen:sync:_bin:
    sources:
      - internal/sync-docs/*.go
    generates:
      - .out/sync-docs
    cmds:
      - go build -o .out/sync-docs ./internal/sync-docs/*.go

  release:prepare:
    requires:
      vars: [VERSION]
    vars:
      SEMVER:
        sh: ./scripts/semver.sh {{.VERSION}}
      BRANCH: 'release-{{.SEMVER}}-{{now | unixEpoch}}'
    cmds:
      - git switch main
      - git pull origin main
      - git switch -c {{.BRANCH}}
      - git cliff --unreleased --tag {{.SEMVER}} --prepend CHANGELOG.md
      - git add CHANGELOG.md
      - 'git commit -m "chore(release): {{.SEMVER}}"'
      - echo "Push the branch '{{.BRANCH}}'. Once merged, create tag the release using 'task release:tag'"

  release:tag:
    requires:
      vars: [VERSION]
    vars:
      SEMVER:
        sh: ./scripts/semver.sh {{.VERSION}}
    cmds:
      - git switch main
      - git pull origin main
      - git tag {{.SEMVER}}
      - echo "Push the tag '{{.SEMVER}}' to release"
