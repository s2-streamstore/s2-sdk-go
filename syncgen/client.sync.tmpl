package s2

import (
	"context"
)

// {{ syncDoc "AccountServiceClient.ListBasins" }}
func (c *Client) ListBasins(ctx context.Context, req *ListBasinsRequest) (*ListBasinsResponse, error) {
	return c.listBasins(ctx, req)
}

// {{ syncDoc "AccountServiceClient.CreateBasin" }}
func (c *Client) CreateBasin(ctx context.Context, req *CreateBasinRequest) (*BasinInfo, error) {
	return c.createBasin(ctx, req)
}

// {{ syncDoc "AccountServiceClient.DeleteBasin" }}
func (c *Client) DeleteBasin(ctx context.Context, req *DeleteBasinRequest) error {
	return c.deleteBasin(ctx, req)
}

// {{ syncDoc "AccountServiceClient.ReconfigureBasin" }}
func (c *Client) ReconfigureBasin(ctx context.Context, req *ReconfigureBasinRequest) (*BasinConfig, error) {
	return c.reconfigureBasin(ctx, req)
}

// {{ syncDoc "AccountServiceClient.GetBasinConfig" }}
func (c *Client) GetBasinConfig(ctx context.Context, basin string) (*BasinConfig, error) {
	return c.getBasinConfig(ctx, basin)
}

// {{ syncDoc "BasinServiceClient.ListStreams" }}
func (b *BasinClient) ListStreams(ctx context.Context, req *ListStreamsRequest) (*ListStreamsResponse, error) {
	return b.listStreams(ctx, req)
}

// {{ syncDoc "BasinServiceClient.CreateStream" }}
func (b *BasinClient) CreateStream(ctx context.Context, req *CreateStreamRequest) (*StreamInfo, error) {
	return b.createStream(ctx, req)
}

// {{ syncDoc "BasinServiceClient.DeleteStream" }}
func (b *BasinClient) DeleteStream(ctx context.Context, req *DeleteStreamRequest) error {
	return b.deleteStream(ctx, req)
}

// {{ syncDoc "BasinServiceClient.ReconfigureStream" }}
func (c *BasinClient) ReconfigureStream(ctx context.Context, req *ReconfigureStreamRequest) (*StreamConfig, error) {
	return c.reconfigureStream(ctx, req)
}

// {{ syncDoc "BasinServiceClient.GetStreamConfig" }}
func (b *BasinClient) GetStreamConfig(ctx context.Context, basin string) (*StreamConfig, error) {
	return b.getStreamConfig(ctx, basin)
}

// {{ syncDoc "StreamServiceClient.CheckTail" }}
func (s *StreamClient) CheckTail(ctx context.Context) (uint64, error) {
	return s.checkTail(ctx)
}

// {{ syncDoc "StreamServiceClient.Append" }}
func (s *StreamClient) Append(ctx context.Context, input *AppendInput) (*AppendOutput, error) {
	return s.append(ctx, input)
}

// {{ syncDoc "StreamServiceClient.Read" }}
func (s *StreamClient) Read(ctx context.Context, req *ReadRequest) (ReadOutput, error) {
	return s.read(ctx, req)
}
